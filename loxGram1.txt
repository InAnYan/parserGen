Program(Decls) ::= Declaration*:Decls "EOF" .

Declaration^ ::= (VarDecl^ | Statement^) .

VarDecl(Name, Initializer) ::= "var" "\w":Name ["=" Expression:Initializer] .

Statement^ ::= (PrintStmt^ | BlockStmt^ | IfStmt^ | ExprStmt^) .
PrintStmt(Expr) ::= "print" Expression:Expr ";" .
ExprStmt(Expr) ::= Expression:Expr ";" .
BlockStmt(decls) ::= "{" Declaration*:decls "}" .
IfStmt(Condition, TrueStmt, FalseStmt) ::= "if" "(" Expression:Condition ")" Statement:TrueStmt ["else" Statement:FalseStmt] .

Expression^ ::= ExpressionComma^ .
ExpressionComma ::= EXPR_LEFT_ASOC(AssignmentExpr, ",").

AssignmentExpr ::= (TernaryExpr | TernaryExpr "=" AssignmentExpr ).
TernaryExpr(MainExpr, TrueExpr, FalseExpr) ::= LogicOrExpr:MainExpr "?" LogicOrExpr:TrueExpr ":" TernaryExpr:FalseExpr .
LogicOrExpr ::= (LogicAndExpr | LogicOrExpr "or" LogicAndExpr) .
LogicAndExpr ::= (EqualityExpr | LogicAndExpr "and" EqualityExpr) .
EqualityExpr ::= (ComparisonExpr | EqualityExpr ("==" | "!=") ComparisonExpr) .
ComparisonExpr ::= (TermExpr | ComparisonExpr (">=" | ">" | "<" | "<=") TermExpr) .
TermExpr ::= (FactorExpr  | TermExpr ("+" | "-") FactorExpr) .
FactorExpr ::= (UnaryExpr | FactorExpr ("*" | "/" | "%") UnaryExpr) .
UnaryExpr(Op, Expr) ::= (("+" | "-" | "!"):Op UnaryExpr:Expr | PrimaryExpr:Expr ).
PrimaryExpr ::= ("\i" | "\w" | "true" | "false" | "(" Expression ")") .